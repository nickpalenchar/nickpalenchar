<?xml version="1.0" encoding="utf-8" ?>
<?xml-stylesheet type="text/xsl" href="https://nickpalenchar.com/xml/base.min.xml" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>motivation on Nick Palenchar üë®‚Äçüíª</title>
    <link>https://nickpalenchar.com/tags/motivation/</link>
    <description>Recent content in motivation on Nick Palenchar üë®‚Äçüíª</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 19 Jan 2018 10:01:12 -0500</lastBuildDate>
    <atom:link href="https://nickpalenchar.com/tags/motivation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Best Sh*t of 2022</title>
      <link>https://nickpalenchar.com/best-sht-of-2022/</link>
      <pubDate>Wed, 28 Dec 2022 06:22:10 -0500</pubDate>
      <guid>https://nickpalenchar.com/best-sht-of-2022/</guid>
      <description>&lt;p&gt;My annual Drop of the best articles and other interesting things I&amp;rsquo;ve found on the internets in 2022. Mostly Developer focused.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: These are not necessarily things &lt;em&gt;published&lt;/em&gt; in 2022, but the things I&amp;rsquo;ve discovered.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;best-articles&#34;&gt;Best Articles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;If you only read one:&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://cuddly-octo-palm-tree.com/posts/2021-09-19-git-elements/&#34;&gt;The Elements of git&lt;/a&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Runner up&lt;/em&gt;: &lt;a href=&#34;https://developer.ibm.com/tutorials/d-learn-workings-git/&#34;&gt;Learn the inner workings of git, not just the commands&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpojer.net/posts/building-a-javascript-bundler&#34;&gt;Building A JavaScript Bundler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.catb.org/~esr/faqs/smart-questions.html&#34;&gt;How To Ask Questions The Smart Way&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://girliemac.com/blog/2017/12/26/git-purr/&#34;&gt;Git commands explained with Cats&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://noahan.me/posts/effective-code-browsing-part1/&#34;&gt;Effective Code Browsing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://matt-rickard.com/reflections-on-10-000-hours-of-programming&#34;&gt;Reflections on 10,000 hrs of programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;best-workflow-improvements&#34;&gt;Best Workflow Improvements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Setting git diff to diff3 (thanks &lt;a href=&#34;https://blog.nilbus.com/take-the-pain-out-of-git-conflict-resolution-use-diff3/&#34;&gt;https://blog.nilbus.com/take-the-pain-out-of-git-conflict-resolution-use-diff3/&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;best-tool-added-to-my-dev-toolbox&#34;&gt;Best Tool added to my Dev Toolbox&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/facebook/jscodeshift&#34;&gt;jscodeshift&lt;/a&gt; and &lt;a href=&#34;https://astexplorer.net/&#34;&gt;astexplorer.net&lt;/a&gt;. Powerful stuff.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;best-online-course&#34;&gt;Best Online Course&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.executeprogram.com/courses/everyday-typescript&#34;&gt;Everyday Typescript (executeprogram)&lt;/a&gt; (paid) - one of the best
online courses I&amp;rsquo;ve &lt;em&gt;ever&lt;/em&gt; taken. Completely demystified TypeScript, especially around the &lt;em&gt;why&lt;/em&gt; and &lt;em&gt;how to resolve&lt;/em&gt; of type errors.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;other-cool-sht&#34;&gt;Other cool sh*t&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://freetubeapp.io/&#34;&gt;FreeTube&lt;/a&gt; is a private YouTube desktop client (I love the idea of having
a dedicated client outside my browser tabs for YouTube in general)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Saying Sorry</title>
      <link>https://nickpalenchar.com/saying-sorry/</link>
      <pubDate>Sat, 10 Dec 2022 06:45:45 -0500</pubDate>
      <guid>https://nickpalenchar.com/saying-sorry/</guid>
      <description>&lt;p&gt;If I find myself queuing up in some line, only to be told by someone that &amp;ldquo;the line
starts over here&amp;rdquo;, my first response is usually to say &amp;ldquo;I&amp;rsquo;m Sorry.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not going to say that anymore.&lt;/p&gt;
&lt;p&gt;Instead I&amp;rsquo;m going to say&amp;ndash;with a similar polite and apologetic tone, mind you&amp;ndash;&amp;ldquo;My Mistake.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;The reason is that, in these situations, while I mean no social disruption, I&amp;rsquo;m not actually sorry (since I didn&amp;rsquo;t know better).&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Humans make mistakes.&lt;/b&gt; Mistakes are how we learn to be better people (in the same way that errors in software can point us to better optimizations). Why are we apologizing for a distinctly human trait? One we couldn&amp;rsquo;t become our best selfs without?&lt;/p&gt;
&lt;p&gt;I encourage everyone to use &amp;ldquo;my mistake&amp;rdquo; over &amp;ldquo;I&amp;rsquo;m sorry.&amp;rdquo; Mistakes are good and we all make them.&lt;/p&gt;
&lt;p&gt;Yes, it feels like semantics mostly, but &amp;ldquo;I&amp;rsquo;m sorry&amp;rdquo; just carries too much shame for most of us, who are already doing our best.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>The Nightmare of Reading on the Internet</title>
      <link>https://nickpalenchar.com/reading-nightmare/</link>
      <pubDate>Sat, 26 Nov 2022 12:55:47 -0500</pubDate>
      <guid>https://nickpalenchar.com/reading-nightmare/</guid>
      <description>&lt;p&gt;I came across a quote in &lt;a href=&#34;https://blog.owulveryck.info/2021/10/07/reading-from-the-web-offline-and-distraction-free.html&#34;&gt;Reading from the web offline and distraction-free&lt;/a&gt;, which was in-turn quoted from &lt;a href=&#34;https://web.archive.org/web/20150817073201/http://lab.arc90.com/2009/03/02/readability/&#34;&gt;The Readability Project&lt;/a&gt;, which I will now shamelessly
echo in full:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Reading anything on the Internet has become a full-on nightmare. As media outlets attempt to eke out as much advertising revenue as possible, we‚Äôre left trying to put blinders on to mask away all the insanity that surrounds the content we‚Äôre trying to read.&lt;/p&gt;
&lt;p&gt;It‚Äôs almost like listening to talk radio, except the commercials play during the program in the background. It‚Äôs a pretty awful experience. Our friend to date has been the trusty ‚ÄúPrint View‚Äù button. Click it and all the junk goes away. I click it all the time and rarely print. It‚Äôs really become the ‚ÄúPeace &amp;amp; Quiet‚Äù button for many.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The decline into the hyperactive &lt;a href=&#34;https://nickpalenchar.com/digital-minimalism&#34;&gt;attention economy&lt;/a&gt; was not instantaneous. Maybe that&amp;rsquo;s why
insistent ads, pop-ups and habit trackers can feel normal and expected to many trying to do anything on the net. But
if you&amp;rsquo;re like me it&amp;rsquo;s infuriating. The analogy of commercials in the background really hit home for me.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t have much to add except that I don&amp;rsquo;t want to forget, so it&amp;rsquo;s going on my [ad- and tracking-free] site. &lt;a href=&#34;https://nickpalenchar.com/organizing-knowledge&#34;&gt;where I won&amp;rsquo;t forget it.&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Finding my unclaimed property</title>
      <link>https://nickpalenchar.com/2022-05-06-escheat/</link>
      <pubDate>Fri, 06 May 2022 09:40:03 -0500</pubDate>
      <guid>https://nickpalenchar.com/2022-05-06-escheat/</guid>
      <description>&lt;p&gt;I just finished listening to the &lt;a href=&#34;https://www.npr.org/2022/05/04/1096726920/escheat-show-classic&#34;&gt;Escheat show&lt;/a&gt; on NPR&amp;rsquo;s Planet money, and learned all about Escheat Law (process?)&lt;/p&gt;
&lt;p&gt;Escheat is a process where seamingly &amp;ldquo;abandoned&amp;rdquo; properties is reported to the state for the owner to claim it&amp;ndash;sort of a lost-and-found for the state residences.&lt;/p&gt;
&lt;p&gt;I searched my name and found 70$ from an old savings account. That&amp;rsquo;s pretty cool.&lt;/p&gt;
&lt;p&gt;I recommend everyone do this. Google &amp;ldquo;unclaimed property &lt;!-- raw HTML omitted --&gt;&amp;rdquo; and skip the first ad-supported link or two.&lt;/p&gt;
&lt;p&gt;More than money can be Echeated; personal proerty, lockboxes, stocks and bonds, pretty much anything that can be considered &amp;ldquo;abandoned&amp;rdquo;&lt;/p&gt;
&lt;p&gt;The NPR story follows the unfortunate side of Escheat. TL:DR; a man bought an Amazon stock in the late 90s on ETrade and left it alone for 20 years. Because he didn&amp;rsquo;t log in it was Eceated in 2008, &lt;em&gt;and the stock was sold at market value at that time&lt;/em&gt;, so the man who would&amp;rsquo;ve had $100k now has $8k in cash (a profit of $2k). Oy I can&amp;rsquo;t believe it.&lt;/p&gt;
&lt;p&gt;Keep track of your accounts I guess?!&lt;/p&gt;
&lt;h3 id=&#34;how-im-keeping-track-of-my-acconuts&#34;&gt;How I&amp;rsquo;m keeping track of my acconuts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;TrueBill&lt;/strong&gt; is an app that keeps track of your subscriptons, you can also link most accounts. It&amp;rsquo;s pretty good, but I suspect it will go downhill in the next 5 years (the same way every multi-accounts managment app have since its Genisis with Mint).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Financial Managers&lt;/strong&gt; - Most of my accounts are managed by a Fiduciary. Having an actual team of qualified humans watching accounts is well worth the couple thousand dollars it costs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Manual checking is in my routine&lt;/strong&gt; - I have a weekly, monthly, quarterly, and yearly routine, and checking on my accounts is the monthly one, so I don&amp;rsquo;t think any of my accounts is likely to be Escheated.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;P.S. This is a &amp;ldquo;lifestream&amp;rdquo; post, where I just write for no particular audiance. I&amp;rsquo;ve found writting out thoughts to be extreamly powerful in my personal life, and I want to start snapshotting thoughts in time. I bet it will be interesting to look back on one day.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>[Realistically] Boosting Your Interview Chances with GitHub</title>
      <link>https://nickpalenchar.com/github/</link>
      <pubDate>Sat, 06 Feb 2021 09:40:03 -0500</pubDate>
      <guid>https://nickpalenchar.com/github/</guid>
      <description>&lt;p&gt;When my employer is hiring, I&amp;rsquo;m the first to want to refer a good person. I&amp;rsquo;ll reach out to my network of bootcamp grads, asking for resumes, hoping I can get them a job at a great company.&lt;/p&gt;
&lt;p&gt;I end up throwing out 99% of them every time.&lt;/p&gt;
&lt;p&gt;The reason is always the same: their GitHub has half a year or much more of total radio silence.&lt;/p&gt;
&lt;p&gt;If there&amp;rsquo;s one piece of advice I could shout from the rooftops, especially to new devs, is that an active GitHub is probably your best competitive advantage to getting an interview or referral cold.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s not a perfect system. But it&amp;rsquo;s the system we have. And it never fully made sense to me until I found myself on the receiving end of resumes, with more to go through and time I had available.&lt;/p&gt;
&lt;p&gt;Simply put, most resumes with equal experience look the same. New bootcamp grads went to a bootcamp and did a couple of projects (that may or may not be hosted). Those with two years of experience have a company they&amp;rsquo;ve worked for, maybe two. And everyone is listing similar languages and technologies they use.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s a start, but then I&amp;rsquo;m left with 5-10 resumes and 1-3 referrals I can comfortably make. At this point I could paste them to a wall and throw a dart. Or I could look at their GitHub.&lt;/p&gt;
&lt;h2 id=&#34;getting-your-github-ready-without-loosing-sleep&#34;&gt;Getting your Github ready without loosing sleep&lt;/h2&gt;
&lt;p&gt;You can easily increase your candidacy with an active GitHub but &lt;strong&gt;you don&amp;rsquo;t need to go crazy either&lt;/strong&gt;. Please don&amp;rsquo;t &lt;a href=&#34;https://medium.com/@iamtjah/eat-sleep-code-repeat-please-dont-f1453659d703&#34;&gt;Eat-Sleep-Code-Repeat&lt;/a&gt;. Conversely, you can get away with doing the bare minimum and be in a stratospherically better place. Here&amp;rsquo;s some simple ways to do just that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Set up some &lt;a href=&#34;https://missing.csail.mit.edu/2020/command-line/#dotfiles&#34;&gt;dotfiles&lt;/a&gt;&lt;/strong&gt; - Effortlessly save your configuration. And whenever you add to it, you get a üü©. I use &lt;a href=&#34;https://github.com/anishathalye/dotbot&#34;&gt;dotbot&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Whenever you take a class, or code through a book, &lt;strong&gt;put that code on GitHub&lt;/strong&gt; - You don&amp;rsquo;t need to author an open source library. Simple code snippets or notes in markdown are great! Put your LeetCode solutions up there too while you&amp;rsquo;re at it. Don&amp;rsquo;t let all the stuff you&amp;rsquo;re already doing collect dust. Get those üü©s!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://pages.github.com/&#34;&gt;Host your website statically on GitHub&lt;/a&gt;.&lt;/strong&gt; - If you have a portfolio, every new thing you add is a üü©. If you host a blog, new posts are new üü©. &lt;a href=&#34;https://nickpalenchar.com&#34;&gt;My website/blog&lt;/a&gt; is hosted &lt;a href=&#34;https://github.com/nickpalenchar/nickpalenchar&#34;&gt;this way&lt;/a&gt; with &lt;a href=&#34;https://hugo.io&#34;&gt;hugo&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It will be very, very unlikely a hiring manager will look at your actual commits. Simply having anything up there is what matters. It shows you walk the walk and talk the talk. It immediately proves you have basic knowledge of the same version control they are definitely using at work.&lt;/p&gt;
&lt;p&gt;And again you don&amp;rsquo;t even need to go overboard in frequency. Your üü©s can be sprinkled like cayenne on a dish that shouldn&amp;rsquo;t be too spicy. But it should not look completely and totally abandoned for the year.&lt;/p&gt;
&lt;h2 id=&#34;reversal&#34;&gt;Reversal&lt;/h2&gt;
&lt;p&gt;I think an active GitHub is the easiest way to give you a competitive advantage, but there are alternatives if they are your thing. Among them, you could:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Be an active blogger&lt;/strong&gt; - Personally, &lt;a href=&#34;https://nickpalenchar.com/worst-blogging-advice/&#34;&gt;I don&amp;rsquo;t like doing this&lt;/a&gt;. I&amp;rsquo;d rather showcase my GitHub.&lt;/li&gt;
&lt;li&gt;If you&amp;rsquo;re more media oriented, &lt;strong&gt;create a YouTube channel&lt;/strong&gt; - Live coding? Put the recording on your YouTube. Do any talks? Get them on YouTube (if you have permission). Or link all your media on a portfolio page (guess where you should host it).&lt;/li&gt;
&lt;li&gt;And none of the GitHub nonsense applies whenever you&amp;rsquo;re referred by a person who knows you well, or even someone you&amp;rsquo;ve met at an event and had a good conversation with.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Just remember, if you do have an alternate to GitHub established, &lt;strong&gt;do not include a link to an empty GitHub in your resume&lt;/strong&gt;. You might want to delete your account altogether, if you really never ever use it. Would a photographer link-drop a portfolio with no photos?&lt;/p&gt;
&lt;h2 id=&#34;but-whyyyyyy-does-it-have-to-be-this-way&#34;&gt;But whyyyyyy does it have to be this way?&lt;/h2&gt;
&lt;p&gt;Yes there are totally flaws in the system. The hiring process has a lot of room for improvement (some companies are trying). You can be a great programmer without doing any of these. But right now, there is no way I can know this by looking at just your resume, and my company will not let me spend 80% of my time talking to candidates to get to know them better.&lt;/p&gt;
&lt;p&gt;I totally welcome the conversation to improve the hiring process, from interview to whiteboarding to everything in between. So please write about how its broken and how we can fix it. I would love to read that. Just make sure it gets committed and hosted on GitHub when you do.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>The Worst Blogging Advice I Ever Received</title>
      <link>https://nickpalenchar.com/worst-blogging-advice/</link>
      <pubDate>Sat, 16 Jan 2021 13:17:09 -0500</pubDate>
      <guid>https://nickpalenchar.com/worst-blogging-advice/</guid>
      <description>&lt;p&gt;No annoying intro here. This is it:&lt;/p&gt;
&lt;h2 id=&#34;when-starting-a-blog-be-sure-to-update-it-regularly&#34;&gt;&amp;ldquo;When starting a blog, be sure to update it regularly&amp;rdquo;&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve actually heard or read this general &amp;ldquo;nugget&amp;rdquo; many times. It is as ubiquitous as it is terrible. One reason is that it&amp;rsquo;s only applicable to one type of blog. The kind that is monetized, relying on a large group of subscribers, with aspirations of generating a livable wage for the author. Obviously, there are many types of blogs.&lt;/p&gt;
&lt;p&gt;Back in 2018 I had set a goal to publish one post a month. I thought it was modest at the time (some authors seem to post weekly at least), but it turned out to be GRUELING. It also didn&amp;rsquo;t produce work I was most proud of. The result of this goal is most of the 2018 posts on this site (you might notice there&amp;rsquo;s less than 12).&lt;/p&gt;
&lt;p&gt;The fact that I couldn&amp;rsquo;t commit made me question if I should even host a blog at all. I felt like a blog with large gaps in the timeline would give the same impression a &amp;ldquo;streaky&amp;rdquo; resume gives off. As a matter-of-fact, the aforementioned terrible advice is often paired with a warning that you will look like you lack a drive for commitment, which could turn off recruiters during the job search, if you don&amp;rsquo;t post regularly.&lt;/p&gt;
&lt;p&gt;This is equally misguided. When I look at my blog, I see a collection of articles that generally represents my thoughts on coding, and general values in the industry. These are topics that are valuable to me, the topics I want to talk about. I don&amp;rsquo;t want it cluttered with noise that is less helpful to readers or myself. Form the viewpoint of a recruiter, wouldn&amp;rsquo;t they rather find content that supports the author&amp;rsquo;s expertise in the field?&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not really sure what my blog is. Heck why does it matter? I just enjoy my tiny space on the corner of the internet I can call my own! Maybe it&amp;rsquo;s a subtle rebellion against larger platforms (blog and social media based). But the autonomy makes me feel warm and fuzzy inside.&lt;/p&gt;
&lt;p&gt;For me, it&amp;rsquo;s helpful to write my thoughts whenever I&amp;rsquo;m moved to do so. And I hope the result is a collection of genuine thoughts and advice that others might find helpful, too.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Best Sh*t of 2021</title>
      <link>https://nickpalenchar.com/best-sht-of-2021/</link>
      <pubDate>Sun, 10 Jan 2021 08:35:06 -0500</pubDate>
      <guid>https://nickpalenchar.com/best-sht-of-2021/</guid>
      <description>&lt;p&gt;My annual Drop of the best articles and other interesting things I&amp;rsquo;ve found on the internets in 2021. Mostly Developer focused.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: These are not necessarily things &lt;em&gt;published&lt;/em&gt; in 2021, but the things I&amp;rsquo;ve discovered.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;best-articles&#34;&gt;Best Articles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://dorinlazar.ro/2021-02-programming-is-hard/&#34;&gt;Programming is Hard&lt;/a&gt;&lt;/strong&gt; - Great writing on the misconception
that &amp;ldquo;anyone&amp;rdquo; can learn to code (much better said than &lt;a href=&#34;https://nickpalenchar.com/please-maybe-learn-to-code/&#34;&gt;my own writing on the matter&lt;/a&gt;). I continue to recommend everyone thinking about learning to code take stock of the rewards as well as the challenges it involves.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://xyproblem.info/&#34;&gt;The XY Problem&lt;/a&gt;&lt;/strong&gt; - We spend lots of time as developers asking for help. Learning the best way makes your life (and your team&amp;rsquo;s) so much better and brighter.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/&#34;&gt;The Joel Test: 12 Steps to Better Code&lt;/a&gt;&lt;/strong&gt; - Simple 12 yes/no questions every new team/management should ask
themselves when setting up a project. Also contains a few nuggets of interesting coding history.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;best-workflow-improvements&#34;&gt;Best Workflow Improvements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;I learned VSCode, and started mapping out many of my own keyboard shortcuts. No articles about this (yet), sorry!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;best-online-course&#34;&gt;Best Online Course&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Nothing turned up this year, so check out the best sh*t from &lt;a href=&#34;https://nickpalenchar.com/best-sht-of-2020#best-online-course&#34;&gt;earlier&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Best Sh*t of 2020</title>
      <link>https://nickpalenchar.com/best-sht-of-2020/</link>
      <pubDate>Thu, 10 Dec 2020 08:35:06 -0500</pubDate>
      <guid>https://nickpalenchar.com/best-sht-of-2020/</guid>
      <description>&lt;p&gt;My annual Drop of the best articles and other interesting things I&amp;rsquo;ve found on the internets in 2020. Mostly Developer focused.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: These are not necessarily things &lt;em&gt;published&lt;/em&gt; in 2020, but the things I&amp;rsquo;ve discovered.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;best-articles&#34;&gt;Best Articles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://slack.engineering/deploys-at-slack/&#34;&gt;Deploys at Slack&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://ashishb.net/all/the-first-two-statements-of-your-bash-script-should-be/&#34;&gt;The first two lines of your bash shell Should Be&lt;/a&gt;&lt;/strong&gt; - Or, unofficial Bash &amp;ldquo;strict mode.&amp;rdquo; Saves you from common shell headaches.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;User Engagement is Code for Addiction&lt;/strong&gt; - This article unfortunately was &lt;a href=&#34;https://nickpalenchar.com/organizing-knowledge/#but-im-stil-in-control&#34;&gt;taken down by Medium&lt;/a&gt; (presumably because they employ this kind of addiction on their
own platform)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://mtlynch.io/code-review-love/&#34;&gt;How to Make Your Code Reviewer Fall In Love With You&lt;/a&gt;&lt;/strong&gt; - We all want
our code review lives to be easier.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://hoanhan.co/posts/2-minute-rule/&#34;&gt;The Two Minute Rule&lt;/a&gt;&lt;/strong&gt; - If you need an easy way to motivate yourself.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://mhawthorne.net/posts/2013-etsy-netflix-I-push-therefore-I-am/&#34;&gt;I Push Therefore I am: 2 Days at Etsy&lt;/a&gt;&lt;/strong&gt; - it&amp;rsquo;s fascinating to me that Netflx and Etsy once had a &amp;ldquo;developer exchange program&amp;rdquo; (seriously how did HR and compliance work?), so a story around that experience is pretty neat to see documented.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.jjude.com/sdl/&#34;&gt;Self Directed Learning&lt;/a&gt;&lt;/strong&gt; - A comprehensive framework to learning how to learn.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;best-sites&#34;&gt;Best Sites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;[https://wizardzines.com/]&lt;/strong&gt; Julia Evans has the coolest style, combining comic book structures with
highly insightful technical instruction (especially around linux). A dream resource for any visual learner.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;best-online-course&#34;&gt;Best Online Course&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://missing.csail.mit.edu/&#34;&gt;The Missing Semester of your CS Education&lt;/a&gt;&lt;/strong&gt; - While geared towards undergrads
who are &lt;em&gt;about&lt;/em&gt; to go into the professional world, this course is an amazing survey of how we can best code professionally, and I recommend it to every one. Even if you&amp;rsquo;ve been in the field for a few years, chances are
there&amp;rsquo;s at least one new thing you&amp;rsquo;ll learn from this course, probably more.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;best-random-highlight&#34;&gt;Best random highlight:&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;When you‚Äôre on a complex task, keep your brain at the top of its game: dump all important stuff on paper. Our brains‚Äô working memory easily overflows with facts and ideas.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    <item>
      <title>Best Sh*t of 2018</title>
      <link>https://nickpalenchar.com/best-sht-of-2018/</link>
      <pubDate>Tue, 13 Nov 2018 08:35:06 -0500</pubDate>
      <guid>https://nickpalenchar.com/best-sht-of-2018/</guid>
      <description>&lt;p&gt;My two favorite articles read I came across in 2018.&lt;/p&gt;
&lt;h3 id=&#34;seven-habits-of-highly-effective-text-editinghttpswwwmoolenaarnethabitshtml&#34;&gt;&lt;a href=&#34;https://www.moolenaar.net/habits.html&#34;&gt;Seven habits of highly effective text editing&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We spend A very large amount of time as developers typing. Unlike traditional writing, we are also constantly jumping around in files and directories, adding removing and factoring. If your set up is not optimized to do this, you could be vastly under performing in your potential.&lt;/p&gt;
&lt;p&gt;There are lots of great articles around text editors and text editing. This is one of the first ones I ever came across that got me thinking about the craft.&lt;/p&gt;
&lt;h3 id=&#34;hiring-religionhttpspaulenglishcomhiringhtml&#34;&gt;&lt;a href=&#34;https://paulenglish.com/hiring.html&#34;&gt;Hiring Religion&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I care deeply about her industry and how we Treat others in it, from interview into working together. This software industry is about the people who make it, and the ability to work together is crucial to productivity. This article covers how best to build and retain that team from the point where it matters most.&lt;/p&gt;
&lt;h3 id=&#34;best-book-the-pragmatic-programmer&#34;&gt;Best Book: The Pragmatic Programmer&lt;/h3&gt;
&lt;p&gt;Well it never really gets very technical, is classic book is great for getting you thinking more about programming
wholistically. I found this incredibly motivating as a young programmer.&lt;/p&gt;
&lt;h3 id=&#34;best-online-course-catalogue-linux-academy-now-acloudguruhttpsacloudgurucom&#34;&gt;Best Online Course Catalogue: Linux Academy (Now &lt;a href=&#34;https://acloudguru.com/&#34;&gt;aCloudGuru&lt;/a&gt;)&lt;/h3&gt;
&lt;p&gt;During my tenure at New York Life Labs, linux academy was my secret weapon.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Life Changing Git Commands You Probably Aren&#39;t Using.</title>
      <link>https://nickpalenchar.com/git-commands/</link>
      <pubDate>Sun, 27 May 2018 10:28:33 -0500</pubDate>
      <guid>https://nickpalenchar.com/git-commands/</guid>
      <description>&lt;p&gt;Every developer uses some kind of version-control system (sometimes called VCS). It a fail-safe to losing work, allowing you to jump back in time and reference files as they once were. Because branching is supported, so much more than linearly stepping back in time is possible. VCS is the backbone for agile collaboration, allowing each developer to have their own copy of some codebase, where they can work at their own pace and merge changes back into a master copy when ready.&lt;/p&gt;
&lt;h2 id=&#34;figuring-out-git&#34;&gt;Figuring out &lt;code&gt;git&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;If you or your company uses GitHub, you&amp;rsquo;re probably very familiar with git. Depending on how well you can wrangle the CLI, git can be amazingly useful or incredibly infuriating. And like everyone else using git, I&amp;rsquo;ve ran into numerous problems and found my own various ways out of them. As my experience grew I began to keep a log of &amp;ldquo;git solutions&amp;rdquo;, which in turn revealed a few useful commands I commonly employ. While simple, they&amp;rsquo;ve come in handy time and again. Maybe they&amp;rsquo;ll come in handy for you as well!&lt;/p&gt;
&lt;p&gt;I call these commands &amp;ldquo;life-changing&amp;rdquo; because they are so simple yet pretty unknown. But most importantly, after adopting them you will probably find notable differences in your workflow. You&amp;rsquo;ll (hopefully) spend less time on git and more time on what matters&amp;ndash;pushing that code!&lt;/p&gt;
&lt;h3 id=&#34;git-remote--v&#34;&gt;&lt;code&gt;git remote -v&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;-v&lt;/code&gt; option stands for &amp;ldquo;verbose&amp;rdquo;. Many people use &lt;code&gt;git remote&lt;/code&gt; to verify a remote (usually named &lt;code&gt;origin&lt;/code&gt;) was added to a repo. Fine for that single case, but we don&amp;rsquo;t get much more information. Especially since most repos have only one remote, frequently with the same &lt;code&gt;origin&lt;/code&gt; name. If you want a bit more info, &lt;code&gt;-v&lt;/code&gt; gives you the URL to which those generic &lt;code&gt;origin&lt;/code&gt; remotes are actually pointing too. I like to think of it as knowing what the value of a variable is in a certain instance, which is often helpful in debugging situations.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why it&amp;rsquo;s life-changing:&lt;/strong&gt; Ever have a directory you &lt;em&gt;think&lt;/em&gt; linked to a certain remote repo but wasn&amp;rsquo;t sure? A directory holding a git project does not have to have the same name as the repo on, say, GitHub, so it could be a similar or vastly outdated repo. Out of caution, some developers might just delete the directory and re-clone the repo, ensuring it is the project they want. But &lt;code&gt;git remote -v&lt;/code&gt; can validate the remote repo in one step. Observe this sample output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ git remote -v
origin  https://github.com/nickpalenchar/nickpalenchar.git &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;fetch&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
origin  https://github.com/nickpalenchar/nickpalenchar.git &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;push&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The location of where I ran this command is a repo that is linked to my &lt;code&gt;nickpalenchar&lt;/code&gt; repository under my username (&lt;code&gt;nickpalenchar&lt;/code&gt;). No recloning needed!&lt;/p&gt;
&lt;h3 id=&#34;git-commit---allow-empty--m-your-message&#34;&gt;&lt;code&gt;git commit --allow-empty -m &#39;your message...&#39;&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Generally, when you try to commit when nothing is staged for doing so, you&amp;rsquo;ll get a &lt;code&gt;nothing to commit, working tree clean&lt;/code&gt; response, with no commit made. The &lt;code&gt;--allow-empty&lt;/code&gt; flag bypasses this saftey check, allowing (you guessed it) an empty commit. So even when nothing is staged or changed, a commit will be written to the git log.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why it&amp;rsquo;s life-changing:&lt;/strong&gt; (I love showing off this one.) There are lots of situations where you need to test doing something with a new commit in order to verify some sort of workflow. A common scenario in my work is verifying a webhook in Continuous Integration will pick up a newly pushed branch. I &lt;em&gt;could&lt;/em&gt; &lt;code&gt;touch yet_another_new_file&lt;/code&gt;, then add it, &lt;em&gt;then&lt;/em&gt; commit it. Or I could &lt;code&gt;git commit --allow-empty -m &#39;empty commit for debugging&#39;&lt;/code&gt; and push that. So convenient. Just one word of warning: you probably don&amp;rsquo;t want this in a more formal codebase; but it&amp;rsquo;s great for a prototyping/testing repo that you will dispose of.&lt;/p&gt;
&lt;h3 id=&#34;git-stash--git-stash-pop&#34;&gt;&lt;code&gt;git stash&lt;/code&gt; / &lt;code&gt;git stash pop&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Admittedly a little more well-known, but if you &lt;em&gt;weren&amp;rsquo;t&lt;/em&gt; aware of &lt;code&gt;stash&lt;/code&gt;, I&amp;rsquo;m glad I can take this opportunity to enlighten you. &lt;code&gt;git stash&lt;/code&gt; sets all your working changes aside (on a stack) and gives you a clean working directory. You can git stash multiple times, and the most recent stash will be at the top if the stack that git has been adding them too. As it goes with stacks, &lt;code&gt;git stash pop&lt;/code&gt; will pop the top-most set of working changes and add them back to the branch you&amp;rsquo;re currently on, ready to be modified or committed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why it&amp;rsquo;s life-changing:&lt;/strong&gt; The most common use for a quick &lt;code&gt;git stash&lt;/code&gt;/&lt;code&gt;git stash pop&lt;/code&gt; is to move the working changes you&amp;rsquo;ve made from one branch to another. Say you&amp;rsquo;ve started working on some changes, only to realize you&amp;rsquo;re on the &lt;code&gt;master&lt;/code&gt; branch! Depending on your repo setup (and if you&amp;rsquo;re in a team), you probably can&amp;rsquo;t push changes from your master branch. You&amp;rsquo;re stuck! This is the classic opportunity for the stash command. Simply &lt;code&gt;git stash&lt;/code&gt; to set those changes aside, restoring your master branch to good-standing cleanness. Then &lt;code&gt;git checkout&lt;/code&gt; the branch you intended to use and &lt;code&gt;git stash pop&lt;/code&gt;. All your new work has been seamlessly moved from one branch to another!&lt;/p&gt;
&lt;h3 id=&#34;git-rm---cached&#34;&gt;&lt;code&gt;git rm --cached&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Another one that&amp;rsquo;s a bit well known, but not known enough in my opinion (or I wouldn&amp;rsquo;t still be removing files that were considered removed). &lt;code&gt;git rm&lt;/code&gt; can remove a file that has previously been committed, but adding &lt;code&gt;--cached&lt;/code&gt; will better ensure it does not come back.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why it&amp;rsquo;s life-changing:&lt;/strong&gt; It&amp;rsquo;s life changing when trying to update a &lt;code&gt;.gitingore&lt;/code&gt; file. Life gets tough when you &lt;code&gt;git add .&lt;/code&gt; and commit before you remember to add a certain file to a &lt;code&gt;.gitignore&lt;/code&gt;. Now you have a file tracked that you did not want. To fix this problem in a fool-proof way, you can &lt;code&gt;git rm --cached name_of_file&lt;/code&gt; (for directory use &lt;code&gt;git rm --cached -r name_of_dir&lt;/code&gt;), add the file to &lt;code&gt;.gitignore&lt;/code&gt; and commit all changes. You won&amp;rsquo;t find that file ever showing up in that repo&amp;rsquo;s tracking again. Another word of caution: this is NOT a solution for removing secrets that were accidentally committed, as they will still exist in the git log! But for something like say, removing &lt;code&gt;node_modules&lt;/code&gt;, this would be the perfect solution.&lt;/p&gt;
&lt;h3 id=&#34;bonus-git-auto-complete&#34;&gt;Bonus: git auto-complete&lt;/h3&gt;
&lt;p&gt;Not an actual command but I had to include as it&amp;rsquo;s probably the biggest life-changing thing you can do with git! Git autocomplete will save you a &lt;em&gt;LOT&lt;/em&gt; of time (both in typing and fixing typos). Once set up, you&amp;rsquo;ll be able to start typing a few characters of a name, then tab to auto-complete or see all possibilities of the current name fragment. It can autocomplete names of git subcommands, remotes, and branches. You can find steps to set this up &lt;a href=&#34;http://code-worrier.com/blog/autocomplete-git/&#34;&gt;here&lt;/a&gt; or here in &lt;a href=&#34;https://github.com/nickpalenchar/swanked-out-bash&#34;&gt;my bash profile&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I love these commands. They&amp;rsquo;ve solved common problems quickly, and  have largley improved my overall git competency. Do you have any git commands/tricks you&amp;rsquo;ve found to be time-saving? fool-proofing? life-changing!? I&amp;rsquo;d love for you to share your common git commands in the comments. Thanks for reading!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Consider Less Anonymous Functions</title>
      <link>https://nickpalenchar.com/anonymous-functions/</link>
      <pubDate>Sun, 29 Apr 2018 10:26:24 -0500</pubDate>
      <guid>https://nickpalenchar.com/anonymous-functions/</guid>
      <description>&lt;p&gt;This post is about coding style. What is coding style? It&amp;rsquo;s a conscious choice in the way the author writes code where such writing is justified by what the author is trying to express. It is not a &amp;ldquo;best practice&amp;rdquo;, nor is it appropriate in all situations. But it&amp;rsquo;s great for reflection. Recently I&amp;rsquo;ve been thinking about anonymous functions (specifically in JavaScript), and what happens when I use them less often.&lt;/p&gt;
&lt;p&gt;Anonymous functions are a great feature in JavaScript (especially with the dawn of Arrow Functions), however there are some nice advantages when you use them less. Here are the ones I&amp;rsquo;ve noted:&lt;/p&gt;
&lt;h2 id=&#34;functions-are-decoupled-from-the-processes-that-use-them&#34;&gt;Functions are decoupled from the processes that use them.&lt;/h2&gt;
&lt;p&gt;By design, anonymous functions can only be used once (in their Function Declaration syntax). So it follows that the function body is written wherever it&amp;rsquo;s used. We see this a lot in higher order array methods and other functional programing styles:&lt;/p&gt;
&lt;b&gt;
let recordsAfter2000 = records.map((record, i) =&gt; {
  if (record.rlsDate) {
    record.date = record.rlsDate;
    delete record.rlsDate;
  }
  if (record.releaseDate) {
    record.date = record.releaseDate;
    delete record.releaseDate;
  }
  return record;
})
  .filter((record) =&gt; record.date &gt;= 2000);
&lt;/b&gt;
&lt;p&gt;This might take some time to understand, especially if you&amp;rsquo;re new to programing. Refactoring is also a bit tricky, since you&amp;rsquo;ll need to track and understand exactly where logic begins and ends.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;recordsAfter2000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;records&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;standardizeRecords&lt;/span&gt;)
                       .&lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;filterBefore2000&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;// more detail (if you want it!)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;standardizeRecords&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;record&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;record&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;rlsDate&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;record&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;date&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;record&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;rlsDate&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;delete&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;record&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;rlsDate&lt;/span&gt;;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;record&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;releaseDate&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;record&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;date&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;record&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;releaseDate&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;delete&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;record&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;releaseDate&lt;/span&gt;;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;record&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;filterBefore2000&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;record&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;record&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;date&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You don&amp;rsquo;t really need to look at the actual logic of the functions, you now get that the records are standardized in &lt;em&gt;some sense&lt;/em&gt; (this example theorizes two different sources of data with a release date written differently). You then know that records before 2000 are being filtered out.&lt;/p&gt;
&lt;p&gt;Yes, this is &lt;a href=&#34;https://eloquentjavascript.net/05_higher_order.html&#34;&gt;Higher Order Functions&lt;/a&gt;. But using named functions as a means to decouple from a process, even if the process does only one thing, can be helpful.&lt;/p&gt;
&lt;h2 id=&#34;easier-to-scale-and-reuse&#34;&gt;Easier to scale and reuse.&lt;/h2&gt;
&lt;p&gt;You may never think you&amp;rsquo;ll need to reuse that anonymous function from a &lt;code&gt;.map&lt;/code&gt;, but how many times to requirements and architecture change? And when they do change, you&amp;rsquo;ll need to take some time to reorient yourself with the old function, remembering where it begins and ends, and making sure you don&amp;rsquo;t mistakingly drag out any code that isn&amp;rsquo;t part of the function. I also enjoy the discipline that starting with a named function implies&amp;ndash;you are starting from the assumption that the code &lt;em&gt;will&lt;/em&gt; scale, and are being careful as deliberate as such.&lt;/p&gt;
&lt;h2 id=&#34;easier-to-debug&#34;&gt;Easier to debug.&lt;/h2&gt;
&lt;p&gt;This is an often forgotten point, but when a program crashes, the name of the function will be available in the stack trace. Depending on the situation, it can be very helpful to know that a program definitively crashed at a certain function. When the crash was a result of multiple functions, seeing every name of each one involved could save a lot of time where you would otherwise manually trace where the data was flowing call to call.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;hint: this can be used inline even if you&amp;rsquo;re not abstracting functions, i.e. &lt;code&gt;something.map(function ADD_NAME(item) { /*...*/ })&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;usually-more-readable&#34;&gt;(Usually) More Readable.&lt;/h2&gt;
&lt;p&gt;This can be especially helpful when working in a shared codebase. Maybe you&amp;rsquo;ve written a function that is designed to be pure, only to have another engineer modify it to add side-effects, or even just do a secondary task which leads to confusing logic. Maybe the extra code prevents the function&amp;rsquo;s original job in some edge cases. A named function might prevent the odd modification from ever arising. Just the name &lt;code&gt;filterBefore2000&lt;/code&gt; on a function implies it should do a specific, singular task. Who knows, other engineers might think twice before modifying.&lt;/p&gt;
&lt;h2 id=&#34;minimizes-indentation&#34;&gt;Minimizes indentation&lt;/h2&gt;
&lt;p&gt;Anonymous functions are almost always inside another block of code. Sometimes, I just really like as few indentations as possible. Especially when other engineers contribute, there&amp;rsquo;s a better chance if the entire script being well written and organized. In the example above, code is never indented more than once. Yay!&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve enjoyed naming more of my functions for all these reasons, as well as the general mindset doing so puts me in. There is lots of power in being very declarative with your programming. Code is more readable, and the coding is driven by intention, ensuring you&amp;rsquo;ve thought through the process of every step needed to achieve your app&amp;rsquo;s goals.&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>An interviewer once asked me how I would build a url-shortener app. After discussion, I decided to actually do it. Here&#39;s what I designed (and how you can contribute to the Open Source project)</title>
      <link>https://nickpalenchar.com/url-shortener/</link>
      <pubDate>Sat, 31 Mar 2018 10:22:20 -0500</pubDate>
      <guid>https://nickpalenchar.com/url-shortener/</guid>
      <description>&lt;p&gt;About a year back I had an on-site interview at a very large finance company. I spent the day meeting engineers from every department, and was asked to whiteboard solutions to many problems. Some were very mathmatical algorithms, others were architectures for things like microservices and AWS. Among the questions, my favorite was making a URL shortener, similar to bit.ly.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;THE CHALLENGE
Design a URL shortener app. It should have a dashboard for users that can submit a link to be shortened. The app will generate a shortened version (using its own domain) that would redirect to the URL when navigated to.

EXAMPLE
Submitting www.averylonglink.com/with/additional/routes would produce shortener.io/ohk4 (or something like that). Navigating to shortener.io/ohk4 would load www.averylonglink.com/with/additional/routes.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There was no coding, or talk of specific technologies. However, fast-forward to 8 months later, we have a chosen stack and a deployed app.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.nickpalenserve.us/public/images/palento_home.png&#34; alt=&#34;&#34; title=&#34;The home page.&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;http://www.nickpalenserve.us/public/images/palento_dashboard.png&#34; alt=&#34;&#34; title=&#34;The dashboard.&#34;&gt;&lt;/p&gt;
&lt;p&gt;The end result is palen-to (The first two syllables of my last name, and the .to TLD).&lt;/p&gt;
&lt;p&gt;Most of the original considerations from the interview room went into the implementation (with more on the way). Among these were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A way to randomly generate a URL.&lt;/li&gt;
&lt;li&gt;A way to ensure all URLs are unique.&lt;/li&gt;
&lt;li&gt;A way to make custom shortened URL names.&lt;/li&gt;
&lt;li&gt;A way to preview potentially malicious redirects (planned)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because Palen-to is branded with my last name, I&amp;rsquo;m only allowing signups from family members that share it. So I&amp;rsquo;ve since built in the following feature:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sign-up restricted to whitelisted individuals.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;how-its-made&#34;&gt;How it&amp;rsquo;s made.&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve built a minimal implementation as a fullstack javascript application. Here&amp;rsquo;s the stack with some pertinent technologies:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Static HTML [Frontend]
&lt;ul&gt;
&lt;li&gt;Bootstrap 3 components (minimal)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Node/expressJS [Server]
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://node-swig.github.io/swig-templates&#34;&gt;Swig&lt;/a&gt; rendering.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MongoDB [Database]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&amp;rsquo;s it! Simple, no?&lt;/p&gt;
&lt;h3 id=&#34;setting-up-redirect-routes&#34;&gt;Setting up redirect routes.&lt;/h3&gt;
&lt;p&gt;Obviously, the name of the game is looking up dynamic shortened routes and redirecting to a specified longer URL. But that&amp;rsquo;s not the &lt;em&gt;only&lt;/em&gt; thing this app should do. Like any well-designed app, this one should have a dashboard and functional routes that allow users to create redirects. These &lt;em&gt;static&lt;/em&gt; (or hard-coded, pre-defined) routes should &lt;em&gt;not&lt;/em&gt; cause a redirect but instead render our own internal views or api functionality.&lt;/p&gt;
&lt;p&gt;So let&amp;rsquo;s start by defining some views:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/           -&amp;gt; Landing Page/login
/dashboard  -&amp;gt; Swig-rendered list of redirect routes made, and a field to make new ones.
/error      -&amp;gt; Rendering of errors
/api/*      -&amp;gt; Namespace for different api routes, to allow things like a POST request for making new urls
/:redirect  -&amp;gt; All the rest will attempt to lookup and redirect a short route to a url.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It&amp;rsquo;s important to node re: Express, that the order of these routes are &lt;em&gt;very important&lt;/em&gt;. In general, important/static routes should go first, and dynamic/general routes should go second/last. Express will trigger middlewere the first time it&amp;rsquo;s match. Take this simple example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/:redirectURL&amp;#39;&lt;/span&gt;, (&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;) =&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;308&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;this would be the redirect&amp;#39;&lt;/span&gt;));

&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/dashboard&amp;#39;&lt;/span&gt;, (&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;) =&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;got the dashboard!&amp;#39;&lt;/span&gt;);

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since the first route is a param (preceeded by a &lt;code&gt;:&lt;/code&gt;), the route would act as a wild card, catching any named route, &lt;em&gt;including&lt;/em&gt; dashboard. If you tried to get to your actual dashboard, we would be intercepted by a redirect lookup every time!&lt;/p&gt;
&lt;p&gt;We can reverse these without the inverse being true, however. If &lt;code&gt;/dashboard&lt;/code&gt; came first, any top level route that wasn&amp;rsquo;t &lt;code&gt;/dashboard&lt;/code&gt; would skip that middleware and eventually find its way to the redirect lookup.&lt;/p&gt;
&lt;p&gt;In the full example, all of these pre-defined routes should go before the redirectURL.&lt;/p&gt;
&lt;h3 id=&#34;creating-and-looking-up-redirect-links&#34;&gt;Creating and looking up redirect links.&lt;/h3&gt;
&lt;p&gt;Enough planning, let&amp;rsquo;s dive into the main course: the actual shortening of the links. I&amp;rsquo;ve opensourced Palen-to into a generic app ready for cloning and deploying, called &lt;a href=&#34;TinyTiny&#34;&gt;https://github.com/nickpalencharopen/tinytiny&lt;/a&gt;. I&amp;rsquo;ll refer to the code there when going into detail about the app, but will refer to the domain where my version is deployed to: &lt;a href=&#34;https://palen.to&#34;&gt;palen.to&lt;/a&gt;. Feel free to clone the opensource version and follow along, or view on GitHub!&lt;/p&gt;
&lt;h4 id=&#34;data-model&#34;&gt;Data model.&lt;/h4&gt;
&lt;p&gt;There&amp;rsquo;s only one important data model here, the &lt;code&gt;Link&lt;/code&gt;. Every url gets shortened to a unique route in the app, such as &lt;code&gt;&#39;abc&#39;&lt;/code&gt; in &lt;code&gt;palen.to/abc&lt;/code&gt;. And that identifier has a one-to-one relation with the expanded url. Both these&lt;/p&gt;
&lt;p&gt;Assuming the request is not a reserved route (such as &lt;code&gt;palen.to/dashboard&lt;/code&gt;), we should look up the document in the data model by that route. There we can find the full URL to direct to. In the data model, we have the following values:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;link_id&lt;/strong&gt;: The shortened link (&lt;code&gt;abc&lt;/code&gt; in &lt;code&gt;palen.to/abc&lt;/code&gt;). Also serves as the unique id for the document (looking up documents by the native Mongo &lt;code&gt;_id&lt;/code&gt; is not nescessary).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;expandedUrl&lt;/strong&gt;: The full url that the shortened route is supposed to redirect to (i.e. &lt;code&gt;www.nickpalenchar.com&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additionally, we&amp;rsquo;ll add some meta data to the model. Knowing the user that made the shortened link is always helpful for getting list of links for a logged in user, and auditing purposes. A creation date is always a good idea as well.&lt;/p&gt;
&lt;p&gt;The full schema of the Link model looks like this! (&lt;a href=&#34;https://github.com/nickpalencharOpen/tinytiny/blob/master/models/link.js&#34;&gt;view on github&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mongoose&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mongoose&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LinkSchema&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mongoose&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Schema&lt;/span&gt;({
    &lt;span style=&#34;color:#a6e22e&#34;&gt;link_id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; String, &lt;span style=&#34;color:#a6e22e&#34;&gt;unique&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;required&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;},
    &lt;span style=&#34;color:#a6e22e&#34;&gt;expandedUrl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; String,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;author&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mongoose&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Schema&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Types&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ObjectId&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ref&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;User&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;required&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt; },
    &lt;span style=&#34;color:#a6e22e&#34;&gt;creationDate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Date, &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Date.&lt;span style=&#34;color:#a6e22e&#34;&gt;now&lt;/span&gt; }
});

&lt;span style=&#34;color:#a6e22e&#34;&gt;mongoose&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;model&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Link&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;LinkSchema&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Getting a redirect route is a matter of finding a Link document by its &lt;code&gt;link_id&lt;/code&gt;. If we get a document back, we can use the &lt;code&gt;expandedUrl&lt;/code&gt; property for the redirection. Express makes redirects very easy, just call the &lt;code&gt;res.redirect&lt;/code&gt; method and &amp;ldquo;Bam!&amp;rdquo;, you get to your destination. If we can&amp;rsquo;t find a document, we send back an internal 404.&lt;/p&gt;
&lt;p&gt;(&lt;a href=&#34;https://github.com/nickpalencharOpen/tinytiny/blob/master/app.js#L121-L130&#34;&gt;view on github&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/:id&amp;#39;&lt;/span&gt;, (&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;) =&amp;gt; {
    &lt;span style=&#34;color:#75715e&#34;&gt;//@@~~**REDIRECTION TIME**~~@@
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// THIS IS WHAT WE CAME HER FOR PPL1//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;looking up &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;params&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Link&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;findOne&lt;/span&gt;({&lt;span style=&#34;color:#a6e22e&#34;&gt;link_id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;params&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;})
        .&lt;span style=&#34;color:#a6e22e&#34;&gt;then&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; =&amp;gt; {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;redirect&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;expandedUrl&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// i.e. www.nickpalenchar.com
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;redirect&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/error?code=404&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// beginning with a slash will go to the error route within our app.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        })
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Creating links is a bit more complicated, we need to consider:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What characters can make up a shortened link&lt;/li&gt;
&lt;li&gt;How to prevent duplicate shortened links from being created&lt;/li&gt;
&lt;li&gt;How to allow custom shortened link names to override randomly created shortened link names, without conflicting with reserved routes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Choosing the allowed characters and randomly generating a shortened link name is a matter of a utility function:&lt;/p&gt;
&lt;p&gt;(&lt;a href=&#34;https://github.com/nickpalencharOpen/tinytiny/blob/master/helper/index.js&#34;&gt;view on github&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;module&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;exports&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;randomHash&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;validChars&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&amp;#39;&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;

    &lt;span style=&#34;color:#75715e&#34;&gt;// loop through a number of times specfied when calling (`num`) creating a random string of that length.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
        &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;validChars&lt;/span&gt;[Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;floor&lt;/span&gt;(Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;random&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;validChars&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;)]; &lt;span style=&#34;color:#75715e&#34;&gt;// concatonate a single random character
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;;
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I&amp;rsquo;m choosing to start my random shortened link names to be especially small, 2 characters long. I chose this because there will not be much scale in users (I&amp;rsquo;m restricting signups to my family, of which none of them are interested in using it ¬Ø\_(„ÉÑ)_/¬Ø ). Still, the possible combination of links will quickly fill up, with the chance of a duplicate being produced likely to happen faster still.&lt;/p&gt;
&lt;p&gt;We need a way to both try again if the produced name is taken, and to &lt;em&gt;increase&lt;/em&gt; the possible number of available names, should the majority be taken.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tryLink&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;defaultStartLength&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;attempt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;){
    &lt;span style=&#34;color:#75715e&#34;&gt;// randomly tries to find an available link
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Promise((&lt;span style=&#34;color:#a6e22e&#34;&gt;resolve&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;reject&lt;/span&gt;) =&amp;gt; {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;customName&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;randomHash&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// only make a random name
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Link&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt;({&lt;span style=&#34;color:#a6e22e&#34;&gt;link_id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;})
            .&lt;span style=&#34;color:#a6e22e&#34;&gt;then&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; =&amp;gt; {
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;) {
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;attempt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;reject&lt;/span&gt;({&lt;span style=&#34;color:#a6e22e&#34;&gt;nick&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Gave up finding an available link&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;This might be solved &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;if you try again. If not, the admin might have to expand the algorithm. Wow this app grew quick!&amp;#34;&lt;/span&gt;});
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tryLink&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;attempt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
                }
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;reserved&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;includes&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toLowerCase&lt;/span&gt;())){
                    &lt;span style=&#34;color:#a6e22e&#34;&gt;reject&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;nick&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Link is a reserved word&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;You can&amp;#39;t use that! Because programming needs. &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Try something else. Please note that no uppercase version of the reserved word can be used either, &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;to avoid ambiguity.&amp;#34;&lt;/span&gt;});
                }
                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Link&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;({&lt;span style=&#34;color:#a6e22e&#34;&gt;link_id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;expandedUrl&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;author&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_id&lt;/span&gt;})
                    .&lt;span style=&#34;color:#a6e22e&#34;&gt;then&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; =&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;resolve&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;));
            })
    })
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This function wraps a Promise around Mongo lookups, so when our api calls it, we can &lt;code&gt;.then&lt;/code&gt; off it once, and the final result will be accessible for us to use.&lt;/p&gt;
&lt;p&gt;It starts by storing a variable either by a customName (passed in from &lt;code&gt;req.body&lt;/code&gt;, via a user input form), or a random name (using the util function described earlier).&lt;/p&gt;
&lt;p&gt;In both cases we want to make sure the link isn&amp;rsquo;t previously in use, by looking up a Link with &lt;code&gt;link_id&lt;/code&gt; equal to the name in question. If there is &lt;em&gt;not&lt;/em&gt; any document returned, the name has no document and therefore is not in use. A final check is to make sure the name does not conflict with any reserved routes. Reserved routes are kept as an Array in a separate json file and &lt;code&gt;requireelif in (as &lt;/code&gt;reserved&lt;code&gt;). We can use &lt;/code&gt;Array.includes`, an ES2016 feature, can be used to make sure the name we came up with is not contained here.&lt;/p&gt;
&lt;p&gt;If we find a result, we try again, recursively calling the function. By wraping the entire function in a Promise, and only invoking a resolve in a non-recursive, ending case, we can easily handle the asynchronous nature of Mongo lookups within our recursive calls. The recursive call also increments the length of the random name to generate by 1 &lt;em&gt;and&lt;/em&gt; keeps track of how many times it has been recursively called, using a second parameter left alone at the start. This is important&amp;ndash;increasing the length after a failed attempt expands the available link names as the app scales, and keeping track of attempts allows me to add an additional fail-safe: to avoid running into, say, an infinite loop by means of something I might have overlooked, we break and error out after the 100th attempt.&lt;/p&gt;
&lt;p&gt;The full middleware for this is described below:&lt;/p&gt;
&lt;p&gt;(&lt;a href=&#34;https://github.com/nickpalencharOpen/tinytiny/blob/master/routes/api.js#L17-L53&#34;&gt;view on github&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;router&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;post&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/new-link&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;requireAuthentication&lt;/span&gt; ,(&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;) =&amp;gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;expandedUrl&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;customName&lt;/span&gt; } &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/^https?:\/\//&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;expandedUrl&lt;/span&gt;)) &lt;span style=&#34;color:#a6e22e&#34;&gt;expandedUrl&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;expandedUrl&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// add `http://` if not already provided, for consistency.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;tryLink&lt;/span&gt;()
        .&lt;span style=&#34;color:#a6e22e&#34;&gt;then&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; =&amp;gt; {
            &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;redirect&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/dashboard?success=&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;JSON&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stringify&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;));
        })
        .&lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt;( &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; =&amp;gt; {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;nick&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;render&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;, {&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;} );
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;redirect&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/error?code=1&amp;#39;&lt;/span&gt;);
        })
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With these two features in place, you have a minimal app that creates fun little links to easily send around! There&amp;rsquo;s is of course a lot more to this app besides this core feature. Getting into the project will show a lot of additional design for the front end views, authentication/user restriction, security, and so much more. While these two aspects are critical to the app&amp;rsquo;s use, it only scratches the the very top surface in terms of how the app is made. If you really want to level up your coding skills, I would be honored if you checkd out the &lt;a href=&#34;https://www.github.com/nickpalencharOpen/tinytiny&#34;&gt;open source project&lt;/a&gt; and consider getting involved. I am actively maintaining the app and would love to work with you! üôåüôåüôå&lt;/p&gt;
</description>
    </item>
    <item>
      <title>The 7 Habits of Highly Effective Node CLIs</title>
      <link>https://nickpalenchar.com/node-clis/</link>
      <pubDate>Wed, 28 Feb 2018 10:17:31 -0500</pubDate>
      <guid>https://nickpalenchar.com/node-clis/</guid>
      <description>&lt;p&gt;title:The 7 Habits of Highly Node CLIs (And how to make your own!)
tags:coding,node,javascript
date:02/28/2018&lt;/p&gt;
&lt;p&gt;I love building CLI&amp;rsquo;s, and I recommend everyone learning to code build one (or more!). It will teach you a lot about how computers work at a slightly more in-depth level than web browser JavaScript. There one of my favorite types of projects, often done at work. However, I recently finished building the open source CLI, &lt;a href=&#34;https://www.npmjs.com/package/@npalenchar/giftwrap&#34;&gt;giftwrap&lt;/a&gt;! It turns vanilla JavaScript functions into a CLI themselves (meta, I know). This includes reading the source function&amp;rsquo;s argument&amp;rsquo;s names and setting them as Unix-like flags.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// vanilla (ES6) file.
function hello(name=&amp;quot;world&amp;quot;, greeter=&amp;quot;computer&amp;quot;){
  console.log(`Hello ${name}! My name is ${greeter}\n`);
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;# CLI invokation!
~ $ giftwrap hello --greeter=&#39;blog post&#39;
Hello, world! My name is blog post


&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This project definitely involved a few&amp;hellip; &amp;ldquo;creative&amp;rdquo; solutions, but I learned a ton about architecting a CLI and manipulating data in the process. Throughout developing giftwrap (and internal projects at work), I started a list of the 7 best concepts (&amp;ldquo;Habits&amp;rdquo;) to learn which will help you build an awesome CLI. Here I will attempt to explain each of these Habits, how they work (with practical examples), and resources for learning and leveraging them further. Note that the list assumes a complete, basic understanding of NodeJS. Furthermore, these Habits were chosen out of my own bias opinion, based on the needs I usually encounter from my own project designs. Even so, I&amp;rsquo;d bet that you&amp;rsquo;ll likely run into a problem at some point which one of these will solve. Let&amp;rsquo;s get going!&lt;/p&gt;
&lt;h1 id=&#34;habit-1processargv&#34;&gt;Habit #1.&lt;code&gt;process.argv&lt;/code&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;What&amp;rsquo;s my name?&amp;rdquo;
-Walter White&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You will probably want users to flag/set options in your CLI. On the command line, this is generally done with single or double dashes (i.e. &lt;code&gt;-v&lt;/code&gt;, &lt;code&gt;--dry-run&lt;/code&gt;, &lt;code&gt;--custom=my-value&lt;/code&gt;). Sometimes it&amp;rsquo;s just the presence of a flag that changes behavior (adding a &lt;code&gt;-a&lt;/code&gt; flag to &lt;code&gt;ls&lt;/code&gt; displays &lt;strong&gt;a&lt;/strong&gt;ll files including hidden ones), and others require a value, usually delimited by &lt;code&gt;=&lt;/code&gt; or a space (such as &lt;code&gt;--set-upstream-to=origin/master&lt;/code&gt; in git).&lt;/p&gt;
&lt;p&gt;The node process is aware of extra inputs typed after the file that is ran. Just like how a function can take an arbitrary number of arguments, invoking a node process on the command line can be followed with an arbitrary number of options.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;~ $ node giftwrap.js --cli-name=hello
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This example has an extra &lt;code&gt;--cli-name=hello&lt;/code&gt; after the actual JavaScript file, &lt;code&gt;giftwrap.js&lt;/code&gt;. Node has a global variable &lt;code&gt;process.argv&lt;/code&gt;, that keeps track of this data in an array. The 0th index is the &lt;code&gt;process.execPath&lt;/code&gt; and the 1st index being the name of the file that was just called by Node. More importantly, every additional command given from the shell, delimited by a space, becomes a string argument in that array (this &lt;em&gt;includes&lt;/em&gt; plain numbers, i.e. &lt;code&gt;node giftwrap.js 0&lt;/code&gt; becomes &lt;code&gt;&amp;quot;0&amp;quot;&lt;/code&gt; in the js file). You can add your own logic to check these values and perform different things depending on their presence/values.&lt;/p&gt;
&lt;h2 id=&#34;parsing-the-extra-flags&#34;&gt;Parsing the extra flags.&lt;/h2&gt;
&lt;p&gt;The flags can take any format (such as &lt;code&gt;-hello&lt;/code&gt;, &lt;code&gt;hello&lt;/code&gt; or &lt;code&gt;\$$$%&lt;/code&gt;), but convention would tell you that starting with dashes are the way to go. For simple options such as &lt;code&gt;-v&lt;/code&gt;, you could use &lt;code&gt;Array.includes&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let verbose;
if (process.argv.includes(&#39;-v&#39;) {
    verbose = true;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Some options allow users to specify extra information, usually in the form of &lt;code&gt;--key=value&lt;/code&gt; or &lt;code&gt;--key value&lt;/code&gt;. I&amp;rsquo;m a fan of using the former syntax, and I usually parse them into an object.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// example using `node example.js --key=value`
let options = {};

process.argv.forEach( str =&amp;gt; {
    if(/=/.test(str) {
        str = str.split(&#39;=&#39;); // [&#39;--key&#39;, &#39;value&#39;]
        str[0] = str[0].replace(/^--?/, &amp;quot;&amp;quot;); // remove dashes for object (easier access)
        options[str[0]] = str[1];
}

console.log(options.key) //-&amp;gt; &#39;value&#39;;
console.log(options.other) //-&amp;gt; undefined;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;additional-resources-for-habit-1&#34;&gt;Additional resources for Habit #1&lt;/h2&gt;
&lt;p&gt;Once you get comfortable with this concept, try out npm modules that can do a lot of the heavy lifting for you, such as &lt;a href=&#34;https://www.npmjs.com/package/argvee&#34;&gt;argvee&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;habit-2-regular-expressions&#34;&gt;Habit #2. Regular Expressions&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Seek and ye shall find&amp;rdquo; -Matthew 7:7&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Regular Expressions (RegEx/RegExp for short) are incredibly powerful. Personally, they&amp;rsquo;re one of my favorite concepts in programming. Once mastered, they can save a ton of time reading through and transforming files (as well as validating many types of inputs like phone numbers and email). If you know the syntax, you&amp;rsquo;d&amp;rsquo;ve realized that RegExp was used just in the last concept example!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;giftwrap&lt;/code&gt; relies on RegExp to both find a function in a file and its arguments. The function&amp;rsquo;s arguments, needed for the options of its future CLI file, is done with a RegExp in this line from &lt;a href=&#34;https://github.com/nickpalenchar/gift-wrap/blob/9db325070a8d9bb6364e82472bf567f2de4b4bba/bin/fragments/postFunc.js#L7&#34;&gt;&lt;code&gt;postFunc.js&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let paramNames = fnRef.toString().match(/function.*\((.*)\)/)[1].replace(/\s/g,&amp;quot;&amp;quot;).split(&#39;,&#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This line takes the function-to-be-CLI&amp;rsquo;d and stringifies it, then uses the RegExp &lt;code&gt;/function.*\((.*)\)/&lt;/code&gt; to look for the function keyword, where after it captures the names within the function body&amp;rsquo;s parenthesis that follows, in a subset. The RegExp.prototype.match method returns the subset needed in the 1st index, hence the &lt;code&gt;[1]&lt;/code&gt; that comes after. Finally, since arguments are comma separated, I did a &lt;code&gt;split&lt;/code&gt; on that delimiter to make a neat array of the name of each parameter that will be needed.&lt;/p&gt;
&lt;p&gt;The regular expression looks a bit archaic, but once you learn the basic metacharacters, writing simple RegExp becomes a sinch!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://nickpalenserve.herokuapp.com/public/images/function-regexp-breakdown.png&#34; alt=&#34;Hello&#34; title=&#34;My RegExp explained&#34;&gt;&lt;/p&gt;
&lt;p&gt;It doesn&amp;rsquo;t hurt that it looks like you can write in a hieroglyphic language either üòâ&lt;/p&gt;
&lt;h2 id=&#34;additional-resources-for-habit-2&#34;&gt;Additional resources for Habit #2&lt;/h2&gt;
&lt;p&gt;Unfortunately, the site where RegExp really clicked for me seems to be gone. If you know of a good resource for learning, let me know in the comments and I&amp;rsquo;ll add it here!&lt;/p&gt;
&lt;h1 id=&#34;habit-3-prompting-the-user&#34;&gt;Habit #3. Prompting the user&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Can I have a name?&amp;rdquo; -the Starbucks Barista&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Have you ever seen a CLI ask you something like the following?:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;confirm (y/n): _
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;GitHub username: _
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;email address (this WILL be public): _
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;These are all prompts, a moment where the CLI pauses and waits for input from that user. In addition to being a requirement for many CLI&amp;rsquo;s, prompts are a great way to make everything more interactive and fun for the user experience.&lt;/p&gt;
&lt;p&gt;Unfortunately, one thing Node lacks is a proper &lt;code&gt;prompt&lt;/code&gt; function (Unlike Python or Ruby, which both have simple ones built-in). But that doesn&amp;rsquo;t mean we can&amp;rsquo;t build our own!&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve found the npm module &lt;a href=&#34;https://www.npmjs.com/package/cli-prompt&#34;&gt;&lt;code&gt;cli-prompt&lt;/code&gt;&lt;/a&gt; to fit my basic needs. It gives you a function &lt;code&gt;prompt&lt;/code&gt; where you can customize the text on the prompt line and get back a response the user types in.&lt;/p&gt;
&lt;p&gt;You can, of course, customize this further. I wanted a more specific confirmation prompt that I could use over and over again. I put this in the &lt;a href=&#34;https://github.com/nickpalenchar/gift-wrap/blob/master/helper/index.js&#34;&gt;helpers section&lt;/a&gt; of my CLI, and imported it everywhere!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;module.exports.confirm = function confirm (promptText=&amp;quot;y/n? &amp;quot;) {


  // set up promise
  return new Promise((resolve) =&amp;gt; {


    prompt(promptText, data=&amp;gt; {
      if(/^ye?s?\s*$/i.test(data)){
        // got a yes
        return resolve(true);
      }
      if(/^no?\s*$/i.test(data)) {
        // got a no
        return resolve(false);
      }


      // if we get here the user entered something incorrect. Recursively call to try again.
      console.log(chalk.red(&amp;quot;Invalid response, please enter `y` or `n` (without quotes)&amp;quot;));
      return confirm()
    })
  })
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Thanks to wrapping in a promise, I can further chain like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;confirm(&#39;Do you really want to exit?&#39;)
  .then(response =&amp;gt; response &amp;amp;&amp;amp; process.exit());
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;habit-4-basic-shell-commands&#34;&gt;Habit #4. Basic shell commands&lt;/h1&gt;
&lt;p&gt;The Unix shell is amazing. It gives you power to the computer limited only by what you know (and whether you can &lt;code&gt;sudo&lt;/code&gt; üòÇ). While Node is &lt;em&gt;JavaScript&lt;/em&gt; in your machine, the shell (&lt;em&gt;Bash&lt;/em&gt;) is still often used, (via &lt;code&gt;child_process&lt;/code&gt;). And shell commands can be very convenient.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s lots of resources for learning these useful commands. You can google them, or type them into a Linux shell or Terminal on Mac to see what they do. Here&amp;rsquo;s a one-line summary of each.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that what Finder (and Window&amp;rsquo;s explorer) call &amp;ldquo;folders&amp;rdquo;, Linux calls &amp;ldquo;directories&amp;rdquo;. They are interchangeable, but I&amp;rsquo;ll be using the latter term as its more technical.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ls&lt;/code&gt; - &amp;ldquo;list&amp;rdquo; - lists all files and directories within the directory you&amp;rsquo;re currently in.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd &amp;lt;location&amp;gt;&lt;/code&gt; - &amp;ldquo;change directory&amp;rdquo; - change directory to a location specified (Like &lt;code&gt;~/Desktop&lt;/code&gt;). Typing nothing changes to home.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pwd&lt;/code&gt; - &amp;ldquo;print working directory&amp;rdquo; - print the working directory, AKA the directory you&amp;rsquo;re currently in.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cat &amp;lt;file1&amp;gt; [&amp;lt;file2...&amp;gt;]&lt;/code&gt; - &amp;ldquo;concatenate&amp;rdquo; - although its original intention was to combine multiple text files and output the result, it is often now used for quickly displaying the contents of a file on the terminal. I use this all the time!&lt;/li&gt;
&lt;li&gt;&lt;code&gt;echo &amp;lt;stuff&amp;gt;&lt;/code&gt; - print everything written. A sort of &lt;code&gt;console.log&lt;/code&gt; of the shell. Useful for getting the values of environment variables (not covered in this post)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mkdir &amp;lt;name&amp;gt;&lt;/code&gt; - &amp;ldquo;make directory&amp;rdquo; - Makes a new directory of the given name.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;touch &amp;lt;name&amp;gt;&lt;/code&gt; - makes a new, empty file of a given name.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rm &amp;lt;name&amp;gt;&lt;/code&gt; - &amp;ldquo;remove&amp;rdquo; - removes a file. To remove a directory, use &lt;code&gt;rm -rf &amp;lt;name&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt; - represents the current directory you&amp;rsquo;re in.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;..&lt;/code&gt; - represents one directory up from the one you&amp;rsquo;re in. Useful with &lt;code&gt;cd&lt;/code&gt;, as &lt;code&gt;cd ..&lt;/code&gt; brings you out of the current directory and back to its parent.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~&lt;/code&gt; - represents the home directory. Useful shorthand as many important paths start at the home.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/&lt;/code&gt; - represents the root directory. Here is where everything starts. It is the beginning of absolute paths to important system files and everything else.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; - &amp;ldquo;redirect output&amp;rdquo; - you can redirect output to a file, and the shell will create it if it doesn&amp;rsquo;t exist. Useful with echo: to create a new text file with &amp;ldquo;Hello World&amp;rdquo; in it, use &lt;code&gt;echo &amp;quot;Hello World&amp;quot; &amp;gt;&amp;gt; new-file.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;additional-resources-for-habit-4&#34;&gt;Additional resources for Habit #4&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://documentup.com/shelljs/shelljs&#34;&gt;ShellJS&lt;/a&gt; is a handy npm module that gives you access to the shell in the following form.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;shelljs.ls(&#39;-a&#39;).stdout;
// same as `ls -a` in bash shell

shelljs.pwd().stdout;
// same as `pwd` in bash shell

let allFiles = shelljs.ls().stdout.split(&#39;\n&#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Sometimes, shelljs is handier than an &lt;code&gt;exec&lt;/code&gt; or another child process, as there&amp;rsquo;s no setup needed to read stdio (just remember add the &lt;code&gt;.stdout&lt;/code&gt; or other i/o name at the end of the method!). Of particular interest to me is the final example, which is an easy one-line way to get names of all files in a directory as an array of filenames.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;em&gt;Linux Essentials: The LPI Introductory Programme&lt;/em&gt; manual is a great start to going much deeper, and can be found under the &amp;ldquo;Linux Essentials&amp;rdquo; header on &lt;a href=&#34;https://www.lpi.org/how-to-get-certified/free-training-materials&#34;&gt;this page&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;concept-5-file-system-fs--navigation&#34;&gt;Concept 5. File System (&lt;code&gt;fs&lt;/code&gt;) &amp;amp; navigation.&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Not all those who wander are lost&amp;rdquo; -The Lord of the Rings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Often, a CLI needs to look around. It might need to create/read files or directories, often in multiple places. At the very least, you will be importing JavaScript files via &lt;code&gt;require&lt;/code&gt;, all which leverages the Unix file system.&lt;/p&gt;
&lt;p&gt;In brief, the file system is how your computer&amp;rsquo;s files are organized. Simple in theory, but the more comfortable you are with the Unix file tree structure, including its syntax, the better you will be at creating powerful CLI&amp;rsquo;s that read and manipulate files and directories, sometimes en masse. It&amp;rsquo;s very powerful and makes you feel really hax0r lvl.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ve probably already navigated a bit using something like &lt;code&gt;require(&#39;../../myModule&#39;)&lt;/code&gt;. In the aforementioned example script, the require function looks two levels up from the current working directory for &lt;em&gt;either&lt;/em&gt; a file &lt;em&gt;or&lt;/em&gt; a directory. Did you get that? It&amp;rsquo;s often a missed point; if &lt;code&gt;myModule&lt;/code&gt; is a directory, Node looks for an &lt;code&gt;index.js&lt;/code&gt; file &lt;em&gt;implicitly&lt;/em&gt;. This is a subtle but great trick as it can be leveraged to scale from one file to a directory of files with more imports, without ever changing the file path.&lt;/p&gt;
&lt;h2 id=&#34;absolute-vs-relative-paths&#34;&gt;Absolute vs Relative paths.&lt;/h2&gt;
&lt;p&gt;An absolute path begins with a &lt;code&gt;/&lt;/code&gt; or a &lt;code&gt;~&lt;/code&gt;, and denotes a &lt;em&gt;full&lt;/em&gt; path to a file/directory. A relative path begins with a &lt;code&gt;..&lt;/code&gt; or &lt;code&gt;.&lt;/code&gt; (if you want to be explicit), or simply the name of a file/directory within the current working directory. Node (or the shell) will walk the relative path given starting from the current working directory. Developing a keen eye for spotting the difference between the two path types will save a lot of developer time.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a quick case-in-point debugging example: Say a require statement was written as &lt;code&gt;require(&#39;/../../myModule&#39;)&lt;/code&gt;, that would be an &lt;em&gt;absolute&lt;/em&gt; path (with syntax that looks relative). In fact, this was definitely intended to be a relative path, but because of the beginning &lt;code&gt;/&lt;/code&gt; it means something completely different. In this case, we&amp;rsquo;re saying, &amp;ldquo;start at the root, then go up two levels from there [which would never, ever exist], and look for &lt;code&gt;myModule&lt;/code&gt;. App-crashing error!&lt;/p&gt;
&lt;p&gt;The better you are with paths, the faster your debugging of silly, silly errors will be.&lt;/p&gt;
&lt;h2 id=&#34;__dirname&#34;&gt;&lt;code&gt;__dirname&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;__dirname&lt;/code&gt; variable (two underscores), contains a string of the working directory the current file is in. This can come in handy when you need to look around from the file&amp;rsquo;s starting point. &lt;code&gt;__dirname&lt;/code&gt; can be used in conjunction with a relative path via &lt;code&gt;path.join&lt;/code&gt;. The result is the ability to use relative paths where absolute paths might be required.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let fragment = fs.readFileSync(path.join(__dirname, &#39;../fragments/startFrag.js&#39;)); // one level up and then into `fragments` for `startFrag.js`
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;additional-resources-for-habit-5&#34;&gt;Additional resources for Habit #5&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Check out the Node [File System Docs](&lt;a href=&#34;https://nodejs.org/api/fs.html&#34;&gt;https://nodejs.org/api/fs.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;habit-6-child_process&#34;&gt;Habit #6. &lt;code&gt;child_process&lt;/code&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Go Forth and Multiply!&amp;rdquo; -Genisis 9:7&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Arguably one of the best things about Node is the child process, which can allow a single-threaded language to scale in parallel. It comes in many forms, &lt;code&gt;exec&lt;/code&gt;, &lt;code&gt;execFile&lt;/code&gt;, &lt;code&gt;spawn&lt;/code&gt;, &lt;code&gt;fork&lt;/code&gt; and more, and each one gives you access to the shell (see Habit #4). This means that you could execute another file (i.e. &lt;code&gt;exec(&#39;node anotherFile.js&#39;)&lt;/code&gt;), you could run a shell script (&lt;code&gt;execFile(&#39;myShellScript.bash&#39;&lt;/code&gt;), or asynchronously fire off a ton of workers (&lt;code&gt;execAsync(&#39;node worker1.js&#39;); execAsync(&#39;node worker2.js&#39;); ...&lt;/code&gt;). Or, being a shell, you can execute shell commands directly (&lt;code&gt;exec(&#39;mkdir output &amp;amp;&amp;amp; cat frag1.txt frag2.txt &amp;gt;&amp;gt; ./output/newFile.txt&#39;)&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Just as handy is the information returned from these processes. You can get data on if the process failed, and logs or Standard Output the child processes are receiving and can respond to those immediately.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const { execFile } = require(&#39;child_process&#39;);
const path = require(&#39;path&#39;);

let stderrs = [];

let process = execFile(path.join(__dirname, &#39;./myFile.sh&#39;, (error, stdout, stderr) =&amp;gt; {
  if(error) {
    throw error;
  }
  if(stderr) {
    stderrs.push(stderr)
  }
  if(stdout) {
    console.log(`[child process]: ${stdout}`);
);

process.on(&#39;exit&#39;, (code) =&amp;gt; {
  console.log(`process ended with exit code ${code}`);
  if(stderrs.length) {
    console.log(`${stderrs.length} messages written to stderr, they are:\n ${stderrs.join(&#39;\n&#39;)`);
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;additional-resources-for-habit-5-1&#34;&gt;Additional resources for Habit #5&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.freecodecamp.org/node-js-child-processes-everything-you-need-to-know-e69498fe970a&#34;&gt;Node.js Child Processes: Everything You Need To Know&lt;/a&gt; - the difference between &lt;code&gt;exec&lt;/code&gt;, &lt;code&gt;fork&lt;/code&gt;, etc can be a bit confusing. This article from &lt;a href=&#34;http://www.freecodecamp.org&#34;&gt;freeCodeCamp&lt;/a&gt; demystifies it all.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;habit-7-publishing-your-node-app-as-a-cli-npm-linking-packagejson-npmignore&#34;&gt;Habit #7. Publishing Your Node App as a CLI (npm, linking, package.json, .npmignore)&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;It&amp;rsquo;s alive! It&amp;rsquo;s alive, it&amp;rsquo;s alive, it&amp;rsquo;s alive! It&amp;rsquo;s ALIVE&amp;rdquo; -Dr. Henry Frankenstine&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The beauty of running a CLI is the convenience&amp;ndash;you simply type the name of the CLI and it runs, no matter where you are in the shell. It&amp;rsquo;s a fundamental feature that many of us take for granted until you realize you always have to run something like &lt;code&gt;node path/to/giftwrap.js&lt;/code&gt; to invoke a node project. Running a node app as a CLI requires a slightly different configuration.&lt;/p&gt;
&lt;h2 id=&#34;set-up-your-packagejson&#34;&gt;Set up your package.json&lt;/h2&gt;
&lt;p&gt;The first thing you&amp;rsquo;ll want to do is add a &lt;code&gt;&amp;quot;bin&amp;quot;&lt;/code&gt; key to your &lt;code&gt;package.json&lt;/code&gt;, this will be an object with keys being the command to type on the terminal, and the value is the path (relative from your project&amp;rsquo;s root) of the file you want to execute &lt;em&gt;in your shell&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// package.json
{
  // ...
  &amp;quot;bin&amp;quot; {
    &amp;quot;giftwrap&amp;quot;: &amp;quot;bin/index.js&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This example sets &lt;code&gt;&amp;lt;myProjectRoot&amp;gt;/bin/index.js&lt;/code&gt; to run whenever &lt;code&gt;giftwrap&lt;/code&gt; is typed (after the next few steps are completed).&lt;/p&gt;
&lt;p&gt;Next, we&amp;rsquo;ll have to add a shebang that specifies the language used to interpret the file (node). Remember, the file ran via &lt;code&gt;bin&lt;/code&gt; is executed in the &lt;em&gt;shell&lt;/em&gt;, and most of the time the shells default language is Bash. Adding a shebang line will change it to Node.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;bin/index.js&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/env node

let { fork } = require(&#39;child_process);

// continue with JavaScript!
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;setting-up-to-run-your-cli-locally&#34;&gt;Setting up to run your CLI locally&lt;/h2&gt;
&lt;p&gt;Now you are all set up to execute the binary from the shell. Finally, in a shell, &lt;code&gt;cd&lt;/code&gt; to your Node project and run &lt;code&gt;npm link&lt;/code&gt;. This will link the binaries you specified in your &lt;code&gt;package.json&lt;/code&gt; (&lt;code&gt;&amp;quot;bin&amp;quot;&lt;/code&gt;) with your &lt;code&gt;PATH&lt;/code&gt; (which is how all commands you run in the shell are found). You can now run your CLI on your computer anywhere! If you make changes in your project and save them, those changes will be immediately reflected when you run the project in the shell.&lt;/p&gt;
&lt;p&gt;Of course, this wouldn&amp;rsquo;t be very useful if only you could run the project, so read on to publish!&lt;/p&gt;
&lt;h2 id=&#34;publishing&#34;&gt;Publishing.&lt;/h2&gt;
&lt;p&gt;Running &lt;code&gt;npm publish&lt;/code&gt; in your project&amp;rsquo;s root will attempt to publish your project by looking at the contents of the &lt;code&gt;package.json&lt;/code&gt;. There are a few properties in that file which have heightened importance at this juncture and are worth reviewing.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;name&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;name&lt;/code&gt; property is the name of your project, and that will become the name of your published module. It will be searched on npm as that name and will be downloaded as &lt;code&gt;npm install &amp;lt;thatName&amp;gt; -g&lt;/code&gt; as well. Names are &lt;strong&gt;global&lt;/strong&gt; by default, so if you tried naming your module &lt;code&gt;bootstrap&lt;/code&gt;, the publish will error and you&amp;rsquo;ll have to choose a different name.&lt;/p&gt;
&lt;p&gt;You &lt;em&gt;can&lt;/em&gt; publish as a scoped package by using your npm username in the name&amp;ndash;it looks like &lt;code&gt;&amp;quot;@username/packagename&amp;quot;&lt;/code&gt;. When doing this you&amp;rsquo;ll have to run &lt;code&gt;npm publish --access public&lt;/code&gt; to keep your module accessible to the world (and why wouldn&amp;rsquo;t you!?). If published this way, users will have to specify the fully scoped package name to find it (i.e. you download mine by running &lt;code&gt;npm install -g @npalenchar/giftwrap&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s worth reiterating that you don&amp;rsquo;t &lt;em&gt;run&lt;/em&gt; the globally installed npm module as, say, &lt;code&gt;@npalenchar/giftwrap&lt;/code&gt;; the command(s) you run is strictly defined in the &lt;code&gt;&amp;quot;bin&amp;quot;&lt;/code&gt; section of the &lt;code&gt;package.json&lt;/code&gt;. You could &lt;code&gt;npm install @npalenchar/giftwrap&lt;/code&gt; and then have to run &lt;code&gt;react-create-app&lt;/code&gt; in the shell, if that&amp;rsquo;s what was specified in your &lt;code&gt;package.json&lt;/code&gt; (this of course is very misleading).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;version&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is another property in your &lt;code&gt;package.json&lt;/code&gt; that might be ignored until you find you can no longer publish updates to npm! Every time you run &lt;code&gt;npm publish&lt;/code&gt;, the &lt;code&gt;&amp;quot;version&amp;quot;&lt;/code&gt; must be unique. Generally, this involves increasing the number. But you could also decrease it, or add words, so long as it hasn&amp;rsquo;t been published as that version in the past. The following would all be acceptable versions for a &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;1&amp;quot;
&amp;quot;0.9.0&amp;quot;
&amp;quot;2.3.30-beta&amp;quot;
&amp;quot;alpha&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The version, however, should always be a string.&lt;/p&gt;
&lt;p&gt;I generally follow some sort of &lt;code&gt;x.y.z&lt;/code&gt; visioning scheme, but it&amp;rsquo;s up to you!&lt;/p&gt;
&lt;h2 id=&#34;additional-resources-for-habit-7&#34;&gt;Additional Resources for Habit #7&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.npmjs.com/getting-started/publishing-npm-packages&#34;&gt;npmjs.org - How to publish &amp;amp; update a package&lt;/a&gt; - these are the official docs I read to publish my first CLI. It&amp;rsquo;s fairly easy to pick up and comes with a how-to example video as well!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With these Habits under your belt, you should be able to conjure up a good amount of CLI&amp;rsquo;s that can do some very useful tasks. If you run into problems or find other useful resources, please let me know in the comments and I&amp;rsquo;ll add them to the lists/try to help!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>A Proactive Approach to Impostor Syndrome</title>
      <link>https://nickpalenchar.com/imposter-syndrome/</link>
      <pubDate>Fri, 19 Jan 2018 10:01:12 -0500</pubDate>
      <guid>https://nickpalenchar.com/imposter-syndrome/</guid>
      <description>&lt;p&gt;We all know about Imposter Syndrome yet the epidemic seems to be growing, especially when breaking into a new career (like those learning to code). No doubt I&amp;rsquo;ve felt it in tech and elsewhere in life, as I&amp;rsquo;m sure you have. While there&amp;rsquo;s plenty of &lt;a href=&#34;https://guide.freecodecamp.org/working-in-tech/imposter-syndrome&#34;&gt;articles&lt;/a&gt; and &lt;a href=&#34;https://www.youtube.com/watch?v=whyUPLJZljE&#34;&gt;videos&lt;/a&gt; on how to fight the self-doubt that comes along with Imposter Syndrome, I&amp;rsquo;d like to offer an alternative approach:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Use it.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You can try to fight Impostor Syndrome or change your mindset, and doing so has worked for some people. Not me. Instead, I use Impostor Syndrome as a primary motivation to learn new and difficult skills. For me, the recognition that I am currently uncomfortable and filled with self-doubt drives me to obliterate those feelings by means of mastery. Not only can Impostor Syndrome be a motivator, but it can also be a validator; &lt;strong&gt;I keep on working for as long as it takes until the feeling of Impostor Syndrome isn&amp;rsquo;t there anymore.&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;impostor-syndrome-as-a-motivator&#34;&gt;Impostor Syndrome as a Motivator&lt;/h1&gt;
&lt;p&gt;It&amp;rsquo;s well recognized that Impostor Syndrome is not necessarily a bad thing. In many ways, it can signal that you care about the work you are doing. While I try to eliminate it through mastery when experienced, the complete absence of Impostor Syndrome can be a signal that you are probably in the wrong field or focusing on the wrong thing. In these situation, I take a hard an honest look about why I &lt;em&gt;really&lt;/em&gt; want to learn something.&lt;/p&gt;
&lt;p&gt;Conversely, the feeling of Impostor Syndrome is often the first step to in rewarding self-growth. Where there&amp;rsquo;s feelings of doubt in a certain area, there are often feelings of success and gratifications if we stay the course. As a rule, whenever resistance is felt in a certain area, that&amp;rsquo;s exactly the direction you should go in, and turning the obstacle (Impostor Syndrome) into a motivator has been the best way for me to prioritize what I should focus on. If this doesn&amp;rsquo;t happen naturally, you can start by changing mindset. Simply change the way you define Impostor Syndrome, from:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Obstacle: I feel like an imposter and therefore should not be doing what I am currently doing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Motivation: I feel like an imposter and therefore should &lt;em&gt;learn more&lt;/em&gt; about what I am currently doing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Understand that avoiding Imposter Syndrome altogether results in being stuck in your comfort zone. Although you&amp;rsquo;ve successfully blocked out self-doubt, you&amp;rsquo;ve also blocked out self-growth and self-satisfaction in the process. No good!&lt;/p&gt;
&lt;h1 id=&#34;what-does-beating-imposter-syndrome-look-like&#34;&gt;What does &amp;ldquo;beating&amp;rdquo; imposter syndrome look like?&lt;/h1&gt;
&lt;p&gt;One thing I love about the tech industry is the quantifiable skills. When you know something, you can prove your worth again in again. I&amp;rsquo;ve beaten my own &amp;ldquo;beginner&amp;rdquo; Impostor Syndrome by building API&amp;rsquo;s, certifying with Amazon Web Services, architecting infrastructure that remains stable, and receiving positive feedback on all my technical interviews in the past year. The best result is not only do I feel a strong sense of accomplishment, but I&amp;rsquo;m wildly confident in what I know. This is also known as conscious competence, the final phase of learning, and it feels great!&lt;/p&gt;
&lt;p&gt;Confidence should not be mistaken with arrogance, however. I&amp;rsquo;m also wildly confident about &lt;em&gt;what I don&amp;rsquo;t know&lt;/em&gt;. I try to be the first to admit I don&amp;rsquo;t understand something&amp;ndash;it&amp;rsquo;s easy for me to do now because I am secure enough in my areas of expertise that I can acknowledge when something is beyond it. Furthermore, I view these new things as a way to expand my skills even more!&lt;/p&gt;
&lt;h1 id=&#34;important-subtleties-to-note&#34;&gt;Important subtleties to note&lt;/h1&gt;
&lt;p&gt;This article is very work-your-ass-off oriented, but it&amp;rsquo;s equally important to take breaks and make sure your work does not consume your entire life (see &amp;ldquo;burnout&amp;rdquo;).&lt;/p&gt;
&lt;p&gt;After I achieve a huge goal, I always take a&amp;ndash;sometimes extended&amp;ndash;amount of time for some serious rest-and-recovery. Maybe it&amp;rsquo;s my work-hard-play-hard nature, but I&amp;rsquo;m a big fan of drilling down three months at a time followed handful more of steady work with days off and lots of Netflix (or hiking) in between. And of course, when preparing for the next round of hard work, I ensure I&amp;rsquo;m fully recovered and mentally prepared for the new tasks ahead. A war is more than just the battle and you can&amp;rsquo;t always be fighting it; there&amp;rsquo;s lots of preparation and recovery needed to ensure you&amp;rsquo;re at peak performance before the actual charge begins.&lt;/p&gt;
&lt;p&gt;I hope you&amp;rsquo;ve enjoyed my two cents on Impostor Syndrome. As a post script I&amp;rsquo;ll admit that writing this article made me feel like a bit of&amp;hellip; a fraud (so meta!). Guess I&amp;rsquo;ll have to keep learning how to improve my writing until I&amp;rsquo;ve beaten Impostor Syndrome once again!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Please Maybe Learn to Code</title>
      <link>https://nickpalenchar.com/please-maybe-learn-to-code/</link>
      <pubDate>Sat, 14 May 2016 10:33:31 -0500</pubDate>
      <guid>https://nickpalenchar.com/please-maybe-learn-to-code/</guid>
      <description>&lt;p&gt;Please don‚Äôt learn to code. Please do learn to code. This past week, a blogospheric angel and devil has emerged on both sides of my shoulders after the latest and greatest installment of opinions manifested on the internet.&lt;/p&gt;
&lt;p&gt;I read the &lt;a href=&#34;http://techcrunch.com/2016/05/10/please-dont-learn-to-code/&#34;&gt;Tech Crunch article&lt;/a&gt;. I read the &lt;a href=&#34;https://medium.freecodecamp.com/please-do-learn-to-code-233597dd141c#.f86wmzk61&#34;&gt;FreeCodeCamp&lt;/a&gt; article. For good measure, I also read the &lt;a href=&#34;http://blog.codinghorror.com/please-dont-learn-to-code/&#34;&gt;Coding Horror&lt;/a&gt; article mentioned by the FreeCodeCamp article. My reaction? They all have valid points and are all worth reading. I don‚Äôt think these articles are in direct conflict with each other as we might have believed them to be.&lt;/p&gt;
&lt;p&gt;This is my happy-medium concoction of the two viewpoints‚Äîthe ‚Äúdon‚Äôt learn to code‚Äù (‚Äúdon‚Äôters‚Äù) and the ‚Äúdo learn to code‚Äù (‚Äúdoers‚Äù).&lt;/p&gt;
&lt;h2 id=&#34;but-first-just-teach-it-in-schools&#34;&gt;But first‚Ä¶ just teach it in schools!&lt;/h2&gt;
&lt;p&gt;Let‚Äôs get one thing straight right now.&lt;/p&gt;
&lt;p&gt;The strange part about all of this is that there‚Äôs actually two different topics being said. There‚Äôs the very real conversation about what it means to code as a career. And somehow, amongst all this commotion, there are these random footnotes where we are talking about whether to include computer science in our school education system.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://nickpalenserve.herokuapp.com/public/images/whyarewehaving.png&#34; alt=&#34;Why are we even&#34; title=&#34;Why are we even having this conversation?&#34;&gt;&lt;/p&gt;
&lt;p&gt;Can we put this to rest? Pretty please? It is, without a doubt, just as important a skill as any other subject you might learn in school. Bear in mind that pretty much every subject taught in school is not utilized by every student. I‚Äôd argue that on average 80% of what is taught in schools is never directly applied to the real world. The true purpose of schools then, is to expose developing minds to a variety of subjects so that they might gain interest in a handful and pursue those particular ones further. To say we shouldn‚Äôt teach programming because not every single student is going to use it in their professional lives is a logical fallacy at best. Let‚Äôs teach it! What do we have to loose?&lt;/p&gt;
&lt;h2 id=&#34;the-long-road-to-a-coding-career&#34;&gt;The [long] road to a coding career.&lt;/h2&gt;
&lt;p&gt;Should you, on the other hand, learn to code as a Career‚Ñ¢? Before taking the plunge, one really should consider the advice of the don‚Äôters.&lt;/p&gt;
&lt;p&gt;Coding is definitely‚Äî&lt;em&gt;definitely&lt;/em&gt;‚Äîvery hard work. It‚Äôs not as simple as taking a three-month boot camp, (although the right one is a proven way to start). The don‚Äôters (and myself included here) are just trying to maintain the integrity of programming, and that‚Äôs a noble cause. It‚Äôs not something you do on the side, or something you take an online course in and say you are now a professional. And it‚Äôs certainly not the glamorous Silicon Valley easy-living sleep-in-till-whenever-party-hard-smoke-weed we see in the moving pictures these days. It. Is. hard. It is agonizing. It is infuriating to deal with on a day-to-day basis. There will be many times when you feel you‚Äôre up against a huge immovable wall. So the interest must come from the sheer joy and getting a program to work, and realizing that these skills will not always come to you quickly, especially if you don‚Äôt come from a programming background.&lt;/p&gt;
&lt;h2 id=&#34;actually-programming-is-like-plumbing-and-we-all-should-learn-both&#34;&gt;Actually, programming &lt;em&gt;is&lt;/em&gt; like plumbing‚Ä¶ and we all should learn both.&lt;/h2&gt;
&lt;p&gt;Is it just me, or is plumbing getting a really bad rap out of all of this conversation?&lt;/p&gt;
&lt;p&gt;I get the intent of the analogy: perhaps not everyone should learn to plumb, although doing so would leave to a rather lucrative career if one puts in the effort. But even if you didn‚Äôt make a career out of plumbing, you‚Äôd pocket a nice chunk of change whenever something went wrong in your own bathroom. Most minor potty problems can be fixed with just a little bit of knowledge on the subject, and you can bet there‚Äôs a nice upcharge to the plumber who would otherwise do the simple work for you. Maybe you don‚Äôt need to do coding professionally, but it sure is nice to know how to open up the Chrome Dev tools and hide elements that were incorrectly rendered in the DOM by supposedly professional Developers in order to get to the actual content in a website, or write a bash script to automate work for you. Or build a simple app because you don‚Äôt like the ones available.&lt;/p&gt;
&lt;p&gt;Whether it‚Äôs for personal convenience or professional ambition, I don‚Äôt see how learning to code could ever be a waste of time.&lt;/p&gt;
&lt;h2 id=&#34;what-we-can-learn-from-both&#34;&gt;What we can learn from both.&lt;/h2&gt;
&lt;p&gt;Let‚Äôs take the good parts and leave the rest. With the don‚Äôters, there‚Äôs the sober reminder that coding is a full-fledged, never ending skill that you gotta be gung-ho about in order to truly stick with. With any movement that gains popularity, we will find a number of new folks who are in it for the hype come out of the woodwork. The don‚Äôters want the hypers out. Hypers are the frauds that want the outcome without the process. They get in the way of the genuine ones trying to do genuine work.&lt;/p&gt;
&lt;p&gt;But if you want to put in the work, if you are genuine about building a career, the doers will tell you that it‚Äôs absolutely, 100% a possibility. What‚Äôs great about &lt;a href=&#34;https://www.code.org&#34;&gt;code.org&lt;/a&gt;, &lt;a href=&#34;https://www.freecodecamp.com&#34;&gt;FreeCodeCamp&lt;/a&gt;, &lt;a href=&#34;https://www.codecademy.com&#34;&gt;codecademy&lt;/a&gt;, and the learn-to-code movement in general is the massage that coding is not, in fact, &lt;em&gt;magic&lt;/em&gt;. It‚Äôs an attainable skill, just like calculus or chemistry or English literature for that matter. I‚Äôve had many conversations with people saying how mysterious the computer is to them, but what they don‚Äôt know is that it doesn‚Äôt have to be that way.&lt;/p&gt;
&lt;p&gt;When I was in high school I loved programming video games with Gamemaker. But pursuing programming as a career never seemed like a good option in my young and ignorant mind. At the time, programming as a profession seemed entirely unattainable, even though I was already writing code and dealing with logical gates and data structures at that age! The learn-to-code movement has helped to bridge the gap between wanting to code and how to start actually coding. Not too long ago, it has shown me the [very large, let‚Äôs not forget] path to a career in software engineering in my own life. So I happily spend early mornings, late nights, and weekends after weekends dedicating myself to learning the craft in the best way that I can. And you know what? I wouldn‚Äôt have it any other way.&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>
